Curs 5
======
Ca un proces sa transmita intrerupero altui process, ele trebuie sa aiba acelasi propietar.
- se pot transmite prin terminal, prin comanda "kill pid". unde pid = process id;
- se transmite semnalul Sigterm, care comanda se ,se poate da in urmatorul mod: kill -nr pid(cauta acest nr, procesul)

kill -9 pid -seek kill, si suntem siguri ca procesul este sutuit.


kill -sufix pid 

astea sunt comenzi pt terminal.
Pt a provoca intreruperea unui semnal din script, 

int kill(int pid, int sig)  - care returneaza 1 in caz de succes si 0 in caz de esec.

Tipuri de semnale
-----------------
1.Prima categoie de semnale se executa in urma tastarii unor caractere speciale de terminalul de control.

SIGINT este produs de apasarea tasteti intr care are atribuit apasarea tastelor ctrl+c (intreruperea procesului).

stty -a va face "Print or change terminal characteristics."

SIGKILL kill = ctrl + \ (sutuie procesul dar salveaza core-ul lui pt depanare.) 
(The SIGKILL signal is sent to a process to cause it to terminate immediately (kill). In contrast to SIGTERM and SIGINT, this signal cannot be caught or ignored, and the receiving process cannot perform any clean-up upon receiving this signal.)

SIGSTP susp =  ctrl + @(duce procesul in starea stopat. Este orpit pana e pronit de un alt semnal.)
(The SIGTSTP signal is sent to a process by its controlling terminal to request it to stop temporarily. It is commonly initiated by the user pressing Control-Z. Unlike SIGSTOP, the process can register a signal handler for or ignore the signal.)

2.In urma porcariilor (bunatati) facute de noi in program.

SIGSEGV - The SIGSEGV signal is sent to a process when it makes an invalid virtual memory reference, or segmentation fault, i.e. when it performs a segmentation violation.
		- apare cand incercam sa facem referinta la o variabila garbage.

SIGILL - memory fault. 
	   - The SIGILL signal is sent to a process when it attempts to execute an illegal, malformed, unknown, or privileged instruction.
------------------------------------------------------------------------------------------------------------------------------------PARANTEZA



POINTERI LA FUNCTII
-------------------

int *x
int arr[10];

diferenta dintre ele e ca x e o variabila, are o var garbage, trebuie ititializata, iar arr[10] este o constanta, alocata deja.


int f(int a)
u = f(5);

f; //inseamna ca este o constanta, un pointer constant unde incepe codul executabil al lui f.
int (*p)(.....); //parantezele spun ca p este o variabila care memoreaza adresa unei functii. daca era int *p(...) at, fct returna un pointer.

if(...)
	p=f;
else 
	p=c;
//unde f, si ce sunt fct definite de noi
.....
(*p)(...);





void qsort(void *tab, int nr, int size, int (*comp)(void *a, void *b))     - nu e apel sistem, sorteaza un tabel dupa anumite criterii
	-*tab - tabloul de sortat.
	-nr = numarul de elemente.
	-size = sizeof
	int (*comp)(void *a, void *b) - functia de comparare scrisa de noi
-------------------------------------------------------------------------------------------------------------------------------------------------

2.In urma porcariilor (bunatati) facute de noi in program.
SIGBUS - The SIGBUS signal is sent to a process when it causes a bus error. The conditions that lead to the signal being raised are, for example, incorrect memory access alignment or non-existent physical address.

struct myStruct
{
	char x;
	int y;
}

char buf[100];

int x = *(int *)(&buf[1


3 Semnale nemodificabile.
SIGCONT - trezeste procesul la viata.
		-The SIGCONT signal instructs the operating system to continue (restart) a process previously paused by the SIGSTOP or SIGTSTP signal. One important use of this signal is in job control in the Unix shell.

SIGKILL - The SIGKILL signal is sent to a process to cause it to terminate immediately (kill). In contrast to SIGTERM and SIGINT, this signal cannot be caught or ignored, and the receiving process cannot perform any clean-up upon receiving this signal.

SIGSTOP - The SIGSTOP signal instructs the operating system to stop a process for later resumption.	

Blocarea si deblocarea semnalelor
---------------------------------

-semnalele nemodificabile nu pot fii blocate.

-sigset_t un tip de date definit intr-un header. Contine diferite semnale posibile.	

int sigemptyset(sigset_t *p) - aceasta functie pune toti bitii pe 0.

int sigfillset(sigset_t *p) - initializeaza toti bitii cu 1


int sigddset(sigset_t *p, int sig) - adauga la multimea specificata un element (pe bit-ul specificat adauga un 1).

int sigdelset(sigset_t *p, int sig) - scoate un element din lista.

int sigismember(sigset_t *p, int sig) - tests whether the signal specified by signo is a member of the set pointed to by set.

int sigprocmask(int op, sigset_t *p_nou, sigset_t *p_vechi) - is used to fetch and/or change the signal mask of the
       calling thread.  The signal mask is the set of signals whose delivery
       is currently blocked for the caller (see also signal(7) for more
       details).

SIG_SETMASK - uita tot ce e instalat si face *p_nou este noua masca de semnal.

SIG_BLOCK - la semnale deja blocate se adauga cele din *p_nou

SIG_UNBLOCK - toate semnalele din *p_nou vor fii deblocate

void handler(int sig)

void(*signal)(int sig, void(*handler)(int sig1))(int sig2) - apelul signal returneaza un pointer catre o functie care returneaza handlerul catre functie.

signal(SIGINT, handler)

SIG_DLF

SIG_IGN

struct sigaction
{
	void (*sa_handler)(int sig);
	sigset_t sal_mask;
	int sa_flags;
}

int sigaction(int sig, struct sigaction *p_nou, struct sigaction *p_vechi)